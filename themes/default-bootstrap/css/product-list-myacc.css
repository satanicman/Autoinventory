/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
.product_list.list .ajax_block_product {
  margin-bottom: 45px;
}
.product_list.grid .ajax_block_product .left-block,
.product_list.grid .ajax_block_product .center-block {
  float: none;
  width: 100%;
  padding: 0;
}
.product_list.grid .ajax_block_product .left-block {
  padding-bottom: 20px;
}
.product_list.grid .ajax_block_product .center-block h5 {
  text-align: center;
}
.product_list.grid .ajax_block_product .center-block .myacc-features {
  min-width: 100%;
}
.product_list.grid .ajax_block_product .center-block .myacc-features td {
  width: 50%;
}
.product_list.grid .ajax_block_product .center-block .button-container {
  display: -webkit-flex;
  display: flex;
}
.product_list.grid .ajax_block_product .center-block .button-container a {
  -webkit-flex-grow: 1;
  flex-grow: 1;
}
.product_list .left-block {
  padding-left: 0;
}
.product_list .left-block img {
  width: 100%;
}
.product_list .center-block {
  padding-right: 0;
}

/*# sourceMappingURL=product-list-myacc.css.map */
