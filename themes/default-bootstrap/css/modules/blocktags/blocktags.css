/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
.tags_block .block_content {
  overflow: hidden;
}
.tags_block .block_content a {
  display: inline-block;
  font-size: 13px;
  line-height: 16px;
  font-weight: bold;
  padding: 4px 9px 5px 9px;
  border: 1px solid #d6d4d4;
  float: left;
  margin: 0 3px 3px 0;
}
.tags_block .block_content a:hover {
  color: #333;
  background: #f6f6f6;
}

/*# sourceMappingURL=blocktags.css.map */
