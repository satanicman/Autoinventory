<?php/** * 2007-2015 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/afl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author    PrestaShop SA    <contact@prestashop.com> * @copyright 2007-2015 PrestaShop SA * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0) * International Registered Trademark & Property of PrestaShop SA */if (!defined('_CAN_LOAD_FILES_'))	exit;require_once(dirname(__FILE__).'/PaymentsCore.php');class Addprod extends Module{	private $b_is_logged = false;	public $shop_url = '';	public $a_notify = array();	public $a_errors = array();	public $html = '';	public function __construct()	{		$this->name = 'addprod';		$this->tab = 'administration';		$this->version = '1.6.1';		$this->module_key = 'c2ca5f5d3d4f1ad5c2bf8fa3f7b1efeb';		parent::__construct();		$this->displayName = $this->l('Products adding PRO');		$this->description = $this->l('Products adding into the shop by customers');		$this->author = 'ORS&DariusAkaFest';		$this->shop_url = str_replace('www.', '', $_SERVER['HTTP_HOST']);		//Settings for different prestashop's versions;		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			if ($this->context->customer != null)				$this->b_is_logged = $this->context->customer->isLogged();		}		else		{			$cookie = $GLOBALS['cookie'];			$this->b_is_logged = $cookie->isLogged();		}	}	public function install()	{		Db::getInstance()->Execute('			CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_."payment` (			`id_payment` INT( 10 ) UNSIGNED NOT NULL AUTO_INCREMENT,			`id_product` INT( 10 ) UNSIGNED NULL ,			`id_order` INT( 10 ) UNSIGNED NULL ,			`summ` DECIMAL( 20, 6 ) NOT NULL DEFAULT '0',			`description` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,			`status` TINYINT( 1 ) UNSIGNED NOT NULL DEFAULT '0',			`id_seller` INT( 10 ) UNSIGNED NOT NULL ,			`date_add` DATETIME NOT NULL ,			`date_upd` DATETIME NOT NULL ,			PRIMARY KEY ( `id_payment` )			) ENGINE = "._MYSQL_ENGINE_.'                ');		Db::getInstance()->Execute('			CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'addprod_manufacturers` (			  `user_id` int(11) NOT NULL,			  `manufacturer_id` int(10) unsigned DEFAULT NULL,			  PRIMARY KEY (`user_id`),			  KEY `man` (`manufacturer_id`)			) ENGINE= '._MYSQL_ENGINE_);		Db::getInstance()->execute('ALTER TABLE  `'._DB_PREFIX_.'addprod_manufacturers`		ADD FOREIGN KEY (  `manufacturer_id` ) REFERENCES  `'._DB_PREFIX_.'manufacturer` (				`id_manufacturer`				) ON DELETE CASCADE ON UPDATE CASCADE ;');		Configuration::updateValue('INCLUDE_TAXES', 0);		Configuration::updateValue('ACTIVAT_STATUSES', serialize(array(2)));		Configuration::updateValue('REMOVE_STATUTES', serialize(array(7)));		Configuration::updateValue('ADDACTIVATION_CODE', '');		Configuration::updateValue('ADDPROD_TYPE_PRODUCT', 1);		Configuration::updateValue('ADDPROD_DISP_AUTHOR', 1);		if (!parent::install()			|| !$this->registerHook('customerAccount')			|| !$this->registerHook1516()			|| !$this->registerHook('extraRight')			|| !$this->registerHook('myAccountBlock')			|| !$this->registerHook('UpdateOrderStatus')			|| (version_compare(_PS_VERSION_, '1.5', '>=') && !$this->registerHook('displayMyAccountBlockfooter'))			|| !$this->installModuleTab('AdminPayments', 'Payments', 2)) return false;		return true;	}	public function registerHook1516()	{		if (_PS_VERSION_ < 1.5)			return true;		else			return $this->registerHook('actionObjectDeleteBefore') && $this->registerHook('displayRightColumnProduct');	}	public function uninstall()	{		Configuration::deleteByName('ADDPROD_IDSERV');		Configuration::deleteByName('ADDPROD_ADDACTIVE');		Configuration::deleteByName('ADDPROD_UPDACTIVE');		Configuration::deleteByName('ADDPROD_VIRTUAL');		Configuration::deleteByName('ADDPROD_GROUP');		Configuration::deleteByName('ADDPROD_PERCENT');		Configuration::deleteByName('ADDPROD_DELETE');		Configuration::deleteByName('INCLUDE_TAXES');		Configuration::deleteByName('ACTIVAT_STATUSES');		Configuration::deleteByName('REMOVE_STATUTES');		Configuration::deleteByName('ADDACTIVATION_CODE');		Configuration::deleteByName('CMS_POPUP_WINDOW');		Configuration::deleteByName('ADDPROD_TYPE_PRODUCT');		Configuration::deleteByName('ADDPROD_DISP_AUTHOR');		$this->unregisterHook('customerAccount');		$this->unregisterHook('myAccountBlock');		$this->unregisterHook('UpdateOrderStatus');		$this->unregisterHook('displayMyAccountBlockfooter');		Db::getInstance()->Execute('DROP TABLE IF EXISTS `'._DB_PREFIX_.'payment`');		Db::getInstance()->Execute('DROP TABLE IF EXISTS `'._DB_PREFIX_.'addprod_manufacturers`');		$this->uninstallModuleTab('AdminPayments');		if (!parent::uninstall()) return false;		return true;	}	private function installModuleTab($tab_class, $t_name, $id_tab_parent)	{		$t_name = '';		$a_translation = array('en' => 'Payments',			'es' => 'Pagos',			'ru' => 'Платежи');		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$tab = new Tab();			$tab->active = 1;			$tab->class_name = 'AdminAddProductModule';			$tab->name = array();			foreach (Language::getLanguages(true) as $lang)				$tab->name[$lang['id_lang']] = (isset($a_translation[$lang['iso_code']])) ? $a_translation[$lang['iso_code']] : 'Payments';			$tab->id_parent = Tab::getIdFromClassName((version_compare(_PS_VERSION_, '1.5', '>=') && version_compare(_PS_VERSION_, '1.5.1', '<'))				? 'AdminParentCustomer' : 'AdminCustomers');			//$tab->id_parent = (int)Tab::getIdFromClassName('AdminCustomers');			$tab->module = $this->name;			return $tab->add();		}		else		{			$languages = Language::getLanguages(false);			$tab_name = array();			$count_languages = count($languages);			for ($index = 0; $index < $count_languages; $index++)			{				$language = $languages[$index];				$tab_name[$language['id_lang']] = (isset($a_translation[$languages[$index]['iso_code']])) ?					$a_translation[$languages[$index]['iso_code']] : 'Payments';			}			call_user_func_array('copy', array(_PS_MODULE_DIR_.$this->name.'/logo.gif', _PS_IMG_DIR_.'t/'.$tab_class.'.gif'));			$tab = new Tab();			$tab->name = $tab_name;			$tab->class_name = $tab_class;			$tab->module = $this->name;			$tab->id_parent = $id_tab_parent;			if (!$tab->save())				return false;			return true;		}	}	private function uninstallModuleTab($tab_class)	{		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$class_name = 'AdminAddProductModule';			$id_tab = (int)Tab::getIdFromClassName($class_name);			if ($id_tab)			{				$tab = new Tab($id_tab);				return $tab->delete();			}			else				return false;		}		else		{			$id_tab = Tab::getIdFromClassName($tab_class);			if ($id_tab != 0)			{				unlink(_PS_IMG_DIR_.'t/'.$tab_class.'.gif');				$tab = new Tab($id_tab);				$tab->delete();				return true;			}			return false;		}	}	public function hookUpdateOrderStatus($params)	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE'))) return true;		if (!Validate::isLoadedObject($params['newOrderStatus']))			die(Tools::displayError('Some parameters are missing.'));		$order = new Order((int)$params['id_order']);		$order_state = $params['newOrderStatus'];		if ($order && !Validate::isLoadedObject($order))			die(Tools::displayError('Incorrect object Order.'));		$b_include_taxes = (int)Configuration::get('INCLUDE_TAXES');		$a_activate_statuses = unserialize(Configuration::get('ACTIVAT_STATUSES'));		$a_remove_statuses = unserialize(Configuration::get('REMOVE_STATUTES'));		require_once(dirname(__FILE__).'/PaymentsCore.php');		if (in_array($order_state->id, $a_activate_statuses))		{			$products = $order->getProducts();			foreach ($products as $product)			{				$prod = new Product((int)$product['product_id']);				if (Validate::isLoadedObject($prod))					if (($prod->id_manufacturer != 0))					{						$i_customer_id = PaymentsCore::getCustomer($prod->id_manufacturer);						if (!$i_customer_id) continue;						$o_customer = new Customer($i_customer_id);						$percent = 1 - PaymentsCore::getManufacturerPercent($prod->id_manufacturer) / 100;						$payments = PaymentsCore::paymentExists($order->id, $product['product_id']);						//PaymentsCore::deletePaymentByOrderIdAndProductId($order->id, $product['product_id']);						$old_sum = null;						if (is_array($payments) && count($payments))							$old_sum = (float)$payments[0]['summ'];						if (!$payments)						{							$payment = new PaymentsCore();							if (version_compare(_PS_VERSION_, '1.5', '>='))								$f_product_price = ($b_include_taxes) ? $product['total_price_tax_incl'] : $product['total_price_tax_excl'];							else							{								$a1 = ($product['product_price'] * (1 - ($product['reduction_percent'] / 100)) - $product['reduction_amount']);								$a2 = ($product['product_price'] * (1 - ($product['reduction_percent'] / 100)) - $product['reduction_amount']);								$f_product_price = $product['product_quantity'] * (($b_include_taxes) ?										($a1 + $a2 * ($product['tax_rate'] / 100)) :										($product['product_price'] * (1 - ($product['reduction_percent'] / 100)) - $product['reduction_amount']));							}							$i_sum = $f_product_price / $order->conversion_rate * $percent;							if ($i_sum > 0)							{								$payment->id_order = $order->id;								$payment->id_seller = $prod->id_manufacturer;								$payment->summ = $i_sum;								$payment->id_product = $product['product_id'];								$payment->status = 0;								$payment->description = $product['product_name'];								if ($payment->add())								{									$template_vars = array();									$template_vars['{product_name}'] = $product['product_name'];									$template_vars['{product_quantity}'] = $product['product_quantity'];									$template_vars['{product_sum}'] = formatMoney($payment->summ);									if (version_compare(_PS_VERSION_, '1.5.3', '>=')) $i_customer_lang_id = $o_customer->id_lang;									else									{										$i_lang_id = getLanguageForCustomer($o_customer->id);										$i_customer_lang_id = $i_lang_id;										if (!$i_customer_lang_id)										{											$default_lang = new Language(Configuration::get('PS_LANG_DEFAULT'));											$i_customer_lang_id = $default_lang->id;										}									}									if (Validate::isEmail($o_customer->email) || !$payments || ($payments && !is_null($old_sum) && $old_sum != $i_sum))										sendMail(getCustomTranslation('Your product was bought', $i_customer_lang_id),											'product_buy',											$o_customer->firstname.' '.$o_customer->lastname,											$o_customer->email,											$template_vars,											false,											$i_customer_lang_id);								}							}						}					}			}		}		//Remove bonuse		if (in_array($order_state->id, $a_remove_statuses))		{			$products = $order->getProducts();			foreach ($products as $product)			{				$prod = new Product((int)$product['product_id']);				if (Validate::isLoadedObject($prod))					if (($prod->id_manufacturer != 0))					{						$i_customer_id = PaymentsCore::getCustomer($prod->id_manufacturer);						if (!$i_customer_id) continue;						$o_customer = new Customer($i_customer_id);						if (PaymentsCore::paymentExists($order->id, $product['product_id']))						{							$template_vars = array();							$a_pamyment = Db::getInstance(_PS_USE_SQL_SLAVE_)->getRow('SELECT * FROM `'._DB_PREFIX_.'payment` p WHERE p.`id_order` = '.								(int)$order->id.' AND p.`id_product` = '.(int)$product['product_id']);							if (!empty($a_pamyment))							{								if (version_compare(_PS_VERSION_, '1.5.3', '>=')) $i_customer_lang_id = $o_customer->id_lang;								else								{									$i_lang_id = getLanguageForCustomer($o_customer->id);									$i_customer_lang_id = $i_lang_id;									if (!$i_customer_lang_id)									{										$default_lang = new Language(Configuration::get('PS_LANG_DEFAULT'));										$i_customer_lang_id = $default_lang->id;									}								}								$s_description = getCustomTranslation('Refund information:', $i_customer_lang_id).' '.									getCustomTranslation('ID payment', $i_customer_lang_id).' - '.$a_pamyment['id_payment'].', '.									getCustomTranslation('Description', $i_customer_lang_id).' - '.$a_pamyment['description'].', '.									getCustomTranslation('from date', $i_customer_lang_id).' - '.$a_pamyment['date_add'].'.';								$payment = new PaymentsCore();								$payment->id_order = $a_pamyment['id_order'];								$payment->id_seller = $a_pamyment['id_seller'];								$payment->summ = - 1 * (float)$a_pamyment['summ'];								$payment->id_product = $a_pamyment['id_product'];								$payment->status = 5;								$payment->description = $s_description;								if ($payment->add())								{									$template_vars = array();									$template_vars['{product_name}'] = $a_pamyment['description'];									$template_vars['{amount}'] = formatMoney($a_pamyment['summ']);									$template_vars['{description}'] = $s_description;									if (Validate::isEmail($o_customer->email))										sendMail(getCustomTranslation('One of orders containing your product was canceled', $i_customer_lang_id),											'product_refund',											$o_customer->firstname.' '.$o_customer->lastname,											$o_customer->email,											$template_vars,											false,											$i_customer_lang_id);								}							}						}					}			}		}	}	public function groupEnabled($id_customer)	{		$o_customer = new Customer($id_customer);		$groups_enabled = Tools::jsonDecode(Configuration::get('ADDPROD_GROUP'));		if (!is_array($groups_enabled)) $groups_enabled = array();		return in_array($o_customer->id_default_group, $groups_enabled);	}	public function hookCustomerAccount($params)	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE'))) return false;		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$this->smarty->assign(array('is16' => version_compare(_PS_VERSION_, '1.6', '>=')));			$link_module_user = Context::getContext()->link->getModuleLink('addprod', 'user');			$this->smarty->assign(array('linkModuleUser' => $link_module_user));		}		if ($this->groupEnabled($params['cookie']->id_customer))			return $this->display(__FILE__, 'my-account.tpl');	}	public function hookMyAccountBlock($params)	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE'))) return false;		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$link_module_user = Context::getContext()->link->getModuleLink('addprod', 'user');			$this->smarty->assign(array('linkModuleUser' => $link_module_user));		}		if ($this->groupEnabled($params['cookie']->id_customer))			return $this->display(__FILE__, 'my-account-top.tpl');	}	public function hookdisplayMyAccountBlockfooter($params)	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE'))) return false;		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$link_module_user = Context::getContext()->link->getModuleLink('addprod', 'user');			$this->smarty->assign(array('linkModuleUser' => $link_module_user));		}		if ($this->groupEnabled($params['cookie']->id_customer))			return $this->display(__FILE__, 'my-account-top.tpl');	}	public function hookMyAccountBlockfooter($params)	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE'))) return false;		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$link_module_user = Context::getContext()->link->getModuleLink('addprod', 'user');			$this->smarty->assign(array('linkModuleUser' => $link_module_user));		}		if ($this->groupEnabled($params['cookie']->id_customer))			return $this->display(__FILE__, 'my-account-top.tpl');	}	public function getContent()	{		if (Tools::isSubmit('submitAddprod') && checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE')))		{			$this->postProcess();			$this->html .= $this->displayConfirmation($this->l('Settings updated'));		} elseif (Tools::isSubmit('SubmitActivationEmail'))		{			$s_email = Tools::getValue('activation_email', '');			if (ValidateCore::isEmail($s_email))			{				$a_var = array('{email}' => $s_email, '{url}' => $this->shop_url, '{version}' => $this->version);				$from = Configuration::get('PS_SHOP_EMAIL');				$target_emails = Array(					'sharos@mail.ru',					'sharoltd@gmail.com'				);				foreach ($target_emails as $a_mail)					sendMail($this->l('Activation code order'), 'code_request', $this->l('Administrator'), $a_mail, $a_var, $from);				if (function_exists('curl_init'))				{					$curl = curl_init();					curl_setopt($curl, CURLOPT_URL, 'http://order-shop.ru/js/mail.php');					curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);					curl_setopt($curl, CURLOPT_POST, true);					curl_setopt($curl, CURLOPT_POSTFIELDS, $a_var);					curl_exec($curl);					curl_close($curl);				}				$this->a_notify[] = $this->l('Request was sent!');			}			else $this->a_errors[] = $this->l('Email is not valid!');		}		elseif (Tools::isSubmit('SubmitActivationCode'))		{			if (checkActivationStateAddProd(Tools::getValue('activation_code')))				Configuration::updateValue('ADDACTIVATION_CODE', Tools::getValue('activation_code'));			else $this->a_errors[] = $this->l('Invalid activation code!');		}		$this->html .= '<h2>'.$this->displayName.'</h2>';		$this->displayForm();		return $this->html;	}	private function displayForm()	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE')))		{			if (!empty($this->a_errors)) foreach ($this->a_errors as $errir) $this->html .= "<p style='color: red;'>{$errir}</p>";			if (!empty($this->a_notify)) foreach ($this->a_notify as $not) $this->html .= "<p style='color: green;'>{$not}</p>";			$this->html .= "					<style>						.addProdCodeTab{							cursor: pointer;							background: #585A69;							padding: 5px 20px;							color: #fff;							font-weight: bold;							border-radius: 5px;						}						.activeProdCodeTab{							background: #cc9900 !important;						}						.addProdActivationDiv{							margin: 20px 0px;						}					</style>					<form method='POST' action='".$_SERVER['REQUEST_URI']."'>						<fieldset style=''>							<span class='addProdCodeTab activeProdCodeTab' data-id='order_activation'>".$this->l('Order an activation code')."</span>							<span class='addProdCodeTab' data-id='sendActivationCode'>".$this->l('Input the code')."</span>    							<div id='order_activation' class='addProdActivationDiv'>								<p>								".				$this->l('To order an activation code input the Email that You used for buying the module in the field below and click the button "Order".')."				</p>								<p>									<input type='text' value='' name='activation_email'>									<input type='submit' value='".$this->l('Order')."' name='SubmitActivationEmail'>    								</p>    								<p>".$this->l('For reference and in case of problems use the contacts:')."</p>								<p>Skype: sharoltd<br/>								ICQ: 245110878<br/>								Phone: +380501614272<br/>								Email: admin@underkey.ru								</p>							</div>							<div id='sendActivationCode' style='display: none;' class='addProdActivationDiv'>								<p>".$this->l('To activate the module, please enter the received activation code in the field below and click "Activate":')."</p>								<p>									<input type='text' value='' name='activation_code'>									<input type='submit' value='".$this->l('Activate')."' name='SubmitActivationCode'>    								</p>							</div>						</fieldset>					</form>					<script type='text/javascript' src='../modules/addprod/views/js/admin_before_activation.js'></script>";			return;		}		$cookie = $GLOBALS['cookie'];		$groups = Group::getGroups($cookie->id_lang);		$availeable_states = OrderState::getOrderStates($cookie->id_lang);		$a_activate_statuses = unserialize(Configuration::get('ACTIVAT_STATUSES'));		$a_remove_statuses = unserialize(Configuration::get('REMOVE_STATUTES'));		$this->html .= '			<script type="text/javascript" src="../modules/addprod/views/js/admin.js"></script>			<script type="text/javascript">				var message_rem = "'.$this->l('This status is already set for add bonus!!!').'";				var message_act = "'.$this->l('This status is already set for remove bonus!!!').'";			</script>				<form method="post" action="'.$_SERVER['REQUEST_URI'].'"><fieldset style="width: 300px;float:right;margin-left:15px;">	<legend><img src="../img/admin/manufacturers.gif" /> '.$this->l('Information').'</legend>	<div id="dev_div">		<span><b>'.$this->l('Version').':</b> '.$this->version.'</span><br><br>		<span><b>'.$this->l('Developers').':</b> DariusAkaFest, ORS<br><br>        <span><b style="vertical-align: top;">'.$this->l('Documentation').':</b>         <a class="link" href="../modules/addprod/readme.pdf" target="_blank" style="vertical-align: top;">ReadMe.pdf</a>         <a href="../modules/addprod/readme.pdf" target="_blank"><img src="../modules/addprod/pdf.png"/></a>         <a href="http://youtu.be/d1d9Gjeg7kM" target="_blank"><img src="../modules/addprod/youtube.png"/></a><br><br>		<p style="text-align:center"><a href="http://underkey.ru" target="_blank">		<img src="../modules/addprod/logo_admin.png" alt="'.$this->l('The module is developed by order of UnderKey.Ru').'"		title="'.$this->l('The module is developed by order of UnderKey.Ru').'"/>		</a>		</p>	</div></fieldset>			<fieldset>		<label>'.$this->l('May add products').'</label>			<div class="margin-form"><div style="float: left;">';		$groups_enabled = Tools::jsonDecode(Configuration::get('ADDPROD_GROUP'));		$percents = Tools::jsonDecode(Configuration::get('ADDPROD_PERCENT'));		foreach ($groups as $group)		{			$this->html .= '<input type="checkbox" name="ADDPROD_GROUP_'.$group['id_group'].'"'.				(is_array($groups_enabled) && (in_array((int)$group['id_group'], $groups_enabled)) ? ' checked="checked" ' : '').'/>							<span style="position: relative;top: 1px;left: 4px;line-height: 15pt; display:inline-block; width: 100px;">'.				$group['name'].'</span>				<input '.(is_array($groups_enabled) && (in_array((int)$group['id_group'], $groups_enabled))					? '' : 'disabled="disabled"').' style="width:50px;" type="text"						name="ADDPROD_PERCENT_'.$group['id_group'].'" value="'.((isset($percents->{$group['id_group']})) ? $percents->{$group['id_group']} : '').'" />				<br/>';
		}		$this->html .= '</div><div style="float: left; margin-left: 20px;"><label style="text-align: left;">'.$this->l('Shop commission, %').'</label><br>			<div>'.$this->l('Deducted from the cost of the selling products.').'</div></div>';		$this->html .= '				<p class="clear">'.$this->l('Customer groups allowed to place products.').'</p>			</div>			<script>				$("[name^=ADDPROD_GROUP_]").change(function () {					if ($(this).is(":checked"))						$("[name=ADDPROD_PERCENT_"+$(this).attr("name").replace("ADDPROD_GROUP_", "")+"]").removeAttr("disabled");					else						$("[name=ADDPROD_PERCENT_"+$(this).attr("name").replace("ADDPROD_GROUP_", "")+"]").attr("disabled", "disabled");				});			</script>';		$cms_pages = CMS::getCMSPages($cookie->id_lang);		$cms_option = '<option value="0">'.$this->l('--None--').'</option>';		foreach ($cms_pages as $cms_page)			$cms_option .= '<option '.(Configuration::get('CMS_POPUP_WINDOW') == $cms_page['id_cms']					? 'selected' : '').' value="'.$cms_page['id_cms'].'">'.$cms_page['meta_title'].'</option>';		$this->html .= '			<label>'.$this->l('Product type on default').'</label>			<div class="margin-form">					<input type="radio" name="ADDPROD_TYPE_PRODUCT" id="dhtml_on"					value="1" '.(Tools::getValue('ADDPROD_TYPE_PRODUCT', Configuration::get('ADDPROD_TYPE_PRODUCT')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_on"> '.$this->l('Virtual').'</label>					<input type="radio" name="ADDPROD_TYPE_PRODUCT"					id="dhtml_off" value="0" '.(!Tools::getValue('ADDPROD_TYPE_PRODUCT', Configuration::get('ADDPROD_TYPE_PRODUCT')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_off">'.$this->l('Physical').'</label>			</div>			<label>'.$this->l('Hide the product type choosing').'</label>			<div class="margin-form">					<input type="radio" name="ADDPROD_VIRTUAL" id="dhtml_on"					value="1" '.(Tools::getValue('ADDPROD_VIRTUAL', Configuration::get('ADDPROD_VIRTUAL')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_on"> <img src="../img/admin/enabled.gif" alt="'.$this->l('Enabled').'" title="'.$this->l('Enabled').'" /></label>					<input type="radio" name="ADDPROD_VIRTUAL"					id="dhtml_off" value="0" '.(!Tools::getValue('ADDPROD_VIRTUAL', Configuration::get('ADDPROD_VIRTUAL')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_off"> <img src="../img/admin/disabled.gif" alt="'.$this->l('Disabled').'" title="'.$this->l('Disabled').'" /></label>			    <p class="clear">'.$this->l('Possibility to choose the product type (Virtual or Physical).').'</p>			</div>			<label>'.$this->l('Display the seller name on the product page').'</label>			<div class="margin-form">					<input type="radio" name="ADDPROD_DISP_AUTHOR" id="ADDPROD_DISP_AUTHOR_on"					value="1" '.(Tools::getValue('ADDPROD_DISP_AUTHOR', Configuration::get('ADDPROD_DISP_AUTHOR')) ? 'checked="checked" ' : '').'/>					<label class="t" for="ADDPROD_DISP_AUTHOR_on"> <img src="../img/admin/enabled.gif"					alt="'.$this->l('Enabled').'" title="'.$this->l('Enabled').'" /></label>					<input type="radio" name="ADDPROD_DISP_AUTHOR"					id="ADDPROD_DISP_AUTHOR_off" value="0" '.(!Tools::getValue('ADDPROD_DISP_AUTHOR',				Configuration::get('ADDPROD_DISP_AUTHOR')) ? 'checked="checked" ' : '').'/>					<label class="t" for="ADDPROD_DISP_AUTHOR_off"> <img src="../img/admin/disabled.gif"					alt="'.$this->l('Disabled').'" title="'.$this->l('Disabled').'" /></label>					<p class="clear">'.$this->l('To show the link to all seller products.').'</p>			</div>			<div style="clear: both; display: block;"></div>			<label>'.$this->l('Active after adding').'</label>			<div class="margin-form">					<input type="radio" name="ADDPROD_ADDACTIVE" id="dhtml_on"					value="1" '.(Tools::getValue('ADDPROD_ADDACTIVE', Configuration::get('ADDPROD_ADDACTIVE')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_on"> <img src="../img/admin/enabled.gif" alt="'.$this->l('Enabled').'" title="'.$this->l('Enabled').'" /></label>					<input type="radio" name="ADDPROD_ADDACTIVE"					id="dhtml_off" value="0" '.(!Tools::getValue('ADDPROD_ADDACTIVE', Configuration::get('ADDPROD_ADDACTIVE')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_off"> <img src="../img/admin/disabled.gif" alt="'.$this->l('Disabled').'" title="'.$this->l('Disabled').'" /></label>			</div>			<label>'.$this->l('Active after updating').'</label>			<div class="margin-form">					<input type="radio" name="ADDPROD_UPDACTIVE"					id="dhtml_on" value="1" '.(Tools::getValue('ADDPROD_UPDACTIVE', Configuration::get('ADDPROD_UPDACTIVE')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_on"> <img src="../img/admin/enabled.gif" alt="'.$this->l('Enabled').'" title="'.$this->l('Enabled').'" /></label>					<input type="radio" name="ADDPROD_UPDACTIVE"					id="dhtml_off" value="0" '.(!Tools::getValue('ADDPROD_UPDACTIVE', Configuration::get('ADDPROD_UPDACTIVE')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_off"> <img src="../img/admin/disabled.gif" alt="'.$this->l('Disabled').'" title="'.$this->l('Disabled').'" /></label>			    <p class="clear">'.$this->l('Is products moderation necessary after you add or update them?').'</p>			</div>			<label>'.$this->l('Deactivate/Delete').'</label>			<div class="margin-form">					<input type="radio" name="ADDPROD_DELETE" id="dhtml_on"					value="1" '.(Tools::getValue('ADDPROD_DELETE', Configuration::get('ADDPROD_DELETE')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_on"> <img src="../img/admin/enabled.gif" alt="'.$this->l('Enabled').'" title="'.$this->l('Enabled').'" /></label>					<input type="radio" name="ADDPROD_DELETE" id="dhtml_off"					value="0" '.(!Tools::getValue('ADDPROD_DELETE', Configuration::get('ADDPROD_DELETE')) ? 'checked="checked" ' : '').'/>					<label class="t" for="dhtml_off"> <img src="../img/admin/disabled.gif" alt="'.$this->l('Disabled').'" title="'.$this->l('Disabled').'" /></label>			    <p class="clear">'.$this->l('Deactivate the product instead of deletion.').'</p>			</div>';		if (Configuration::get('PS_TAX'))		{			$this->html .= '						<label>'.$this->l('Include taxes').'</label>							<div class="margin-form">											<input type="radio" name="INCLUDE_TAXES" id="dhtml_on"											value="1" '.(Tools::getValue('INCLUDE_TAXES', Configuration::get('INCLUDE_TAXES')) ? 'checked="checked" ' : '').'/>											<label class="t" for="dhtml_on">											<img src="../img/admin/enabled.gif" alt="'.$this->l('Enabled').'" title="'.$this->l('Enabled').'" /></label>											<input type="radio" name="INCLUDE_TAXES" id="dhtml_off"											value="0" '.(!Tools::getValue('INCLUDE_TAXES', Configuration::get('INCLUDE_TAXES')) ? 'checked="checked" ' : '').'/>											<label class="t" for="dhtml_off">											<img src="../img/admin/disabled.gif" alt="'.$this->l('Disabled').'" title="'.$this->l('Disabled').'" /></label>								<p class="clear">'.$this->l('Author bonus calculation method.').'</p>							</div>';		}		$this->html .= '<label>'.$this->l('Notice about adding').'</label>			<div class="margin-form">				<select name="ADDPROD_IDSERV">				<option value="0">'.$this->l('Do not send').'</option>';		$contacts = Contact::getContacts($cookie->id_lang);		$id_contact = Tools::getValue('ADDPROD_IDSERV', Configuration::get('ADDPROD_IDSERV'));		foreach ($contacts as $contact) $this->html .= '<option value="'.$contact['id_contact'].'" '			.($contact['id_contact'] == $id_contact ? 'selected="selected"' : '').'>'.$contact['name'].'</option>';		$this->html .= '</select>				<p class="clear">'.$this->l('Contact type to whom the message about the product addition will be sent.').'</p>			</div>			<label>'.$this->l('CMS page with Terms of Service').'</label>			<div class="margin-form">				<select name="CMS_POPUP_WINDOW">				'.$cms_option.'				</select>			<p class="clear">'.$this->l('Choose the CMS page with Terms of Service for sellers.').'</p>				</div>';		$this->html .= '<label>'.$this->l('Active order statuses:').'</label>			<div class="margin-form">				<p></p>				<table>				<tr>					<th style="text-align: center;">'.$this->l('Add bonus').'&nbsp;&nbsp;</th>					<th style="text-align: center;">'.$this->l('Remove bonus').'&nbsp;&nbsp;</th>					<th>'.$this->l('Status name').'</th>				</tr>';		foreach ($availeable_states as $status)		{			$this->html .= '<tr>										<td style="text-align: center;">										<input value="'.(int)$status['id_order_state'].'" type="checkbox"										id="active_state_'.(int)$status['id_order_state'].'"										name="active_state[]" '.((in_array((int)$status['id_order_state'], $a_activate_statuses)) ? "checked='checked'" : '').'>										</td>										<td style="text-align: center;">										<input type="checkbox" value="'.(int)$status['id_order_state'].'"										id="removing_bonus_'.(int)$status['id_order_state'].'"										name="remove_state[]" '.((in_array((int)$status['id_order_state'], $a_remove_statuses)) ? "checked='checked'" : '').'>										</td>										<td>'.$status['name'].'</td>									</tr>';		}		$this->html .= '</table>					<p class="clear">'.$this->l('Select the order statuses under which seller bonuses are added or removed.').'</p>				</div>';		$this->html .= '<center><input type="submit" name="submitAddprod" value="'.$this->l('Save').'" class="button" /></center>			</fieldset>			</form>';		$this->l('Withdrawal of rewards ordered!');		$this->l('Added the new product #');		$this->l('Deleted product #');		$this->l('Updated product #');		$this->l('Your product was bought');		$this->l('Withdraw order was sent!');		$this->l('One of orders containing your product was canceled');		$this->l('Refund information:');		$this->l('ID payment');		$this->l('Description');		$this->l('from date');	}	private function postProcess()	{		if (!checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE'))) return false;		Configuration::updateValue('ADDPROD_IDSERV', (int)Tools::getValue('ADDPROD_IDSERV'));		Configuration::updateValue('ADDPROD_ADDACTIVE', (int)Tools::getValue('ADDPROD_ADDACTIVE'));		Configuration::updateValue('ADDPROD_UPDACTIVE', (int)Tools::getValue('ADDPROD_UPDACTIVE'));		Configuration::updateValue('ADDPROD_VIRTUAL', (int)Tools::getValue('ADDPROD_VIRTUAL'));		Configuration::updateValue('INCLUDE_TAXES', (int)Tools::getValue('INCLUDE_TAXES', 0));		Configuration::updateValue('CMS_POPUP_WINDOW', (int)Tools::getValue('CMS_POPUP_WINDOW', 0));		Configuration::updateValue('ADDPROD_TYPE_PRODUCT', (int)Tools::getValue('ADDPROD_TYPE_PRODUCT', 0));		Configuration::updateValue('ADDPROD_DISP_AUTHOR', (int)Tools::getValue('ADDPROD_DISP_AUTHOR', 0));		$a_activate_statuses = (array)Tools::getValue('active_state', array());		$a_remove_statuses = (array)Tools::getValue('remove_state', array());		$a_activate_statuses = array_map('intval', $a_activate_statuses);		$a_remove_statuses = array_map('intval', $a_remove_statuses);		Configuration::updateValue('ACTIVAT_STATUSES', serialize($a_activate_statuses));		Configuration::updateValue('REMOVE_STATUTES', serialize($a_remove_statuses));		$groups_array = Array();		$percent_array = Array();		foreach ($_POST as $key => $value)		{			if (Tools::substr($key, 0, 13) == 'ADDPROD_GROUP' && $group_id = (int)Tools::substr($key, 14)) $groups_array[] = $group_id;			if (Tools::substr($key, 0, 15) == 'ADDPROD_PERCENT' && $group_id = (int)Tools::substr($key, 16)) $percent_array[$group_id] = $value;		}		Configuration::updateValue('ADDPROD_GROUP', Tools::jsonEncode($groups_array));		Configuration::updateValue('ADDPROD_PERCENT', Tools::jsonEncode($percent_array));		Configuration::updateValue('ADDPROD_DELETE', (int)Tools::getValue('ADDPROD_DELETE'));	}	public function hookActionObjectDeleteBefore($params)	{		$object = $params['object'];		if ($object instanceof Manufacturer)			Db::getInstance()->delete('addprod_manufacturers', 'manufacturer_id = '.(int)$object->id);	}	public function hookExtraRight()	{		return $this->hookDisplayRightColumnProduct();	}	public function hookDisplayRightColumnProduct()	{		$smarty = $GLOBALS['smarty'];		$cookie = $GLOBALS['cookie'];		if (version_compare(_PS_VERSION_, '1.5', '>='))		{			$smarty = $this->context->smarty;			$cookie = $this->context->cookie;		}		$id_product = Tools::getValue('id_product');		$product = new Product($id_product);		if (!Validate::isLoadedObject($product))			return '';		$manufacturer = new Manufacturer($product->id_manufacturer, $cookie->id_lang);		$smarty->assign('manufacturer', $manufacturer);		return $smarty->fetch(_PS_MODULE_DIR_.'addprod/views/templates/hook/extra_right.tpl');	}}