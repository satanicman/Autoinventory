<?php/** * 2007-2015 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/afl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author    PrestaShop SA    <contact@prestashop.com> * @copyright 2007-2015 PrestaShop SA * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0) * International Registered Trademark & Property of PrestaShop SA */if (!defined('_PS_VERSION_'))    exit;require_once(dirname(__FILE__) . '../../../PaymentsCore.php');require_once(dirname(__FILE__) . '../../../addprod.php');class AddprodUserModuleFrontController extends ModuleFrontController{    public $auth = true;    public $ssl = true;    public $lngs_resorted = array();    public function init()    {        parent::init();        $customer = new Customer((int)$this->context->cookie->id_customer);        if (!PaymentsCore::groupEnabled($customer->id) || !checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE')))            Tools::redirect('index.php?controller=my-account');        $lngs = Language::getLanguages();        $count_lngs = count($lngs);        for ($ii = 0; $ii < 2; $ii++) {            for ($i = 0; $i < $count_lngs; $i++) {                if ($ii == 0) $check = ($lngs[$i]['id_lang'] == Configuration::get('PS_LANG_DEFAULT'));                else $check = ($lngs[$i]['id_lang'] != Configuration::get('PS_LANG_DEFAULT'));                if ($check) $this->lngs_resorted[] = $lngs[$i];            }        }        $this->context->smarty->assign(array(            'meta_title' => $this->module->l('My products', 'user') . ' - ' . Configuration::get('PS_SHOP_NAME')        ));    }    public function postProcess()    {        $addprod_manufacturer_id = PaymentsCore::getManufacturer((int)$this->context->cookie->id_customer);        $customer = new Customer((int)$this->context->cookie->id_customer);        $default_lang = Configuration::get('PS_LANG_DEFAULT');        $lngs = $this->lngs_resorted;        if (Tools::isSubmit('ajax') && Tools::isSubmit('saveManufacturerInfo')) {            $name = Tools::getValue('name');            $description = Tools::getValue('description');            $file = array();            if (isset($_FILES['logo']))                $file = $_FILES['logo'];            $manufacturer = new Manufacturer($addprod_manufacturer_id);            $errors = array();            if (empty($name))                $errors[] = $this->module->l('Name empty', 'user');            if (!empty($name) && !Validate::isCatalogName($name))                $errors[] = $this->module->l('Name wrong', 'user');            if (isset($file['tmp_name'])) {                if (in_array(exif_imagetype($file['tmp_name']), array(IMAGETYPE_JPEG, IMAGETYPE_GIF, IMAGETYPE_PNG))) {                    if (file_exists(_PS_MANU_IMG_DIR_ . $manufacturer->id . '.jpg'))                        unlink(_PS_MANU_IMG_DIR_ . $manufacturer->id . '.jpg');                    ImageManager::resize($file['tmp_name'], _PS_MANU_IMG_DIR_ . $manufacturer->id . '.jpg');                    $images_types = ImageType::getImagesTypes('manufacturers');                    foreach ($images_types as $k => $image_type) {                        if (file_exists(_PS_MANU_IMG_DIR_ . $manufacturer->id . '-' . Tools::stripslashes($image_type['name']) . '.jpg'))                            unlink(_PS_MANU_IMG_DIR_ . $manufacturer->id . '-' . Tools::stripslashes($image_type['name']) . '.jpg');                        ImageManager::resize(                            _PS_MANU_IMG_DIR_ . $manufacturer->id . '.jpg',                            _PS_MANU_IMG_DIR_ . $manufacturer->id . '-' . Tools::stripslashes($image_type['name']) . '.jpg',                            (int)$image_type['width'],                            (int)$image_type['height']                        );                    }                } else                    $errors[] = $this->module->l('File wrong', 'user');            }            if (!count($errors)) {                $manufacturer->name = $name;                $manufacturer->description = $description;                $manufacturer->save();                die(Tools::jsonEncode(array(                    'hasError' => false,                    'message' => $this->module->l('Saved successfully!', 'user')                )));            } else                die(Tools::jsonEncode(array(                    'hasError' => true,                    'errors' => $errors                )));        }        if (Tools::isSubmit('submitAgree')) {            if (!$addprod_manufacturer_id) {                $manufacturer = new Manufacturer();                $manufacturer->name = ($customer->firstname . ' ' . $customer->lastname);                $manufacturer->add();                PaymentsCore::createManufacturer($this->context->cookie->id_customer, $manufacturer->id);            }        }        if (Tools::isSubmit('submitProduct')) {            if ($addprod_manufacturer_id) $manufacturer = new Manufacturer($addprod_manufacturer_id);            else {                $manufacturer = new Manufacturer();                $manufacturer->name = ($customer->firstname . ' ' . $customer->lastname);                $manufacturer->add();                PaymentsCore::createManufacturer($this->context->cookie->id_customer, $manufacturer->id);            }            //Редактируем            if ($id_edit = Tools::GetValue('product_id')) {                $product = new Product((int)$id_edit);                if ($product->id_manufacturer != $addprod_manufacturer_id)                    $this->errors[] = Tools::displayError('Do not touch someone elses product');            } else {                //Продукт                $product = new Product();            }            $name = Array();            $description_short = Array();            $description = Array();            if (!Validate::isCatalogName($name[$default_lang] = Tools::getValue('name_' . $default_lang))                || empty($name[$default_lang])            )                $this->errors[] = Tools::displayError('Do not enter a title for the primary language');            if (!Validate::isCleanHtml($description_short[$default_lang] = Tools::getValue('description_short_' . $default_lang))                || Tools::strlen($description_short[$default_lang]) < 10            )                $this->errors[] = Tools::displayError('Do not enter a short description for the primary language or it is too short');            if (!Validate::isCleanHtml($description[$default_lang] = Tools::getValue('description_' . $default_lang))                || Tools::strlen($description[$default_lang]) < 10            )                $this->errors[] = Tools::displayError('No description for the main language, or it is too short');            $count_lngs = count($lngs);            for ($i = 1; $i < $count_lngs; $i++) {                $name[$lngs[$i]['id_lang']] = Tools::getValue('name_' . $lngs[$i]['id_lang']);                if (Validate::isCleanHtml($description_short[$lngs[$i]['id_lang']] = Tools::getValue('description_short_' . $lngs[$i]['id_lang']))                    && Tools::strlen($description_short[$lngs[$i]['id_lang']]) < 10                    && Tools::strlen($description_short[$lngs[$i]['id_lang']]) > 0                )                    $this->errors[] = Tools::displayError('Short description for localization "' . $lngs[$i]['iso_code'] . '" too short');                if (Validate::isCleanHtml($description[$lngs[$i]['id_lang']] = Tools::getValue('description_' . $lngs[$i]['id_lang']))                    && Tools::strlen($description[$lngs[$i]['id_lang']]) < 10                    && Tools::strlen($description[$lngs[$i]['id_lang']]) > 0                )                    $this->errors[] = Tools::displayError('Description for localization "' . $lngs[$i]['iso_code'] . '" too short');            }            $download = null;            $filename = '';            if ($id_edit) {                $download = new ProductDownload(ProductDownload::getIdFromIdProduct($id_edit));                $filename = $download->display_filename;            }            if (!$_FILES['virtual_product_file']['name'] && Tools::getValue('is_virtual_product') && $filename == '')                $this->errors[] = Tools::displayError('Not uploaded file');            if ($_FILES['image_product']['name']) {                $i = 0;                foreach ($_FILES['image_product']['tmp_name'] as $image_product) {                    if (file_exists($image_product)) {                        if (!ImageManager::isRealImage($image_product, $_FILES['image_product']['type'][$i])) {                            $this->errors[] = Tools::displayError('This file type of image is not allowed.');                            break;                        }                    }                    $i++;                }            }            if (!count($this->errors)) {                $product->link_rewrite[$default_lang] = (Tools::link_rewrite($name[$default_lang]) || Tools::link_rewrite($description_short[$default_lang]));                $product->name[$default_lang] = $name[$default_lang];                $product->description_short[$default_lang] = $description_short[$default_lang];                $product->description[$default_lang] = $description[$default_lang];                foreach ($lngs as $lng) {                    if ($lng['id_lang'] != $default_lang) {                        $product->link_rewrite[$lng['id_lang']] = Tools::link_rewrite($name[$lng['id_lang']] ? $name[$lng['id_lang']] : $name[$default_lang]);                        $product->name[$lng['id_lang']] = $name[$lng['id_lang']] ? $name[$lng['id_lang']] : $name[$default_lang];                        $product->description_short[$lng['id_lang']] = $description_short[$lng['id_lang']] ?                            $description_short[$lng['id_lang']] : $description_short[$default_lang];                        $product->description[$lng['id_lang']] = $description[$lng['id_lang']] ? $description[$lng['id_lang']] : $description[$default_lang];                    }                }                $product->id_category_default = (int)Tools::getValue('defaultCategory');                $product->price = (float)Tools::getValue('price');                $product->quantity = (!Tools::getValue('is_virtual_product') ? Tools::getValue('quantity') : 1000);                $product->minimum_quantity = 1;                $product->is_virtual = (int)Tools::getValue('is_virtual_product') ? 1 : 0;                $product->id_tax = 0;                $product->id_manufacturer = $manufacturer->id;                $id_tax = 1;                if (Configuration::get('PS_TAX')) $id_tax = (int)Tools::getValue('tax_rule');                $product->id_tax_rules_group = $id_tax;                if ($id_edit) {                    $product->active = Configuration::get('ADDPROD_UPDACTIVE');                    $result = $product->update();                } else {                    $product->active = Configuration::get('ADDPROD_ADDACTIVE');                    $result = $product->add();                }                StockAvailable::setProductOutOfStock((int)$product->id, 2);                if (!$result)                    $this->errors[] = Tools::displayError('This product is not added. Contact the administrator.');                else {                    $carriers = Tools::getValue('carriers');                    if (!is_array($carriers) || Tools::getValue('is_virtual_product'))                        $carriers = array();                    $product->setCarriers($carriers);                    StockAvailable::setQuantity($product->id, 1, (!Tools::getValue('is_virtual_product') ? Tools::getValue('quantity') : 1000));                    $product->updateCategories(array($product->id_category_default), false);                    $product->deleteCategories();                    if (!$product->addToCategories(Tools::getValue('categories')))                        $this->errors[] = Tools::displayError('Error during adding product to categories.');                    if ($_FILES['image_product']['name'])                        foreach ($_FILES['image_product']['tmp_name'] as $image_product) {                            if (file_exists($image_product)) {                                $image = new Image();                                $image->id_product = (int)$product->id;                                $image->position = Image::getHighestPosition($product->id) + 1;                                $image->cover = !count($product->getImages(Configuration::get('PS_LANG_DEFAULT')));                                $image->add();                                if (!$new_path = $image->getPathForCreation())                                    $this->errors[] = Tools::displayError('An error occurred during new folder creation');                                $tmp_name = $image_product;                                if (empty($this->errors)) {                                    if (!ImageManager::resize($tmp_name, $new_path . '.' . $image->image_format, null, null, $image->image_format))                                        $this->errors[] = Tools::displayError('An error occurred while copying base image:');                                    $images_types = ImageType::getImagesTypes('products');                                    foreach ($images_types as $image_type) {                                        if (!ImageManager::resize($tmp_name, $new_path . '-' .                                            Tools::stripslashes($image_type['name']) . '.' . $image->image_format, $image_type['width'], $image_type['height'], $image->image_format)                                        )                                            $this->errors[] = Tools::displayError('An error occurred while copying image:') . ' ' . Tools::stripslashes($image_type['name']);                                    }                                }                                unlink($tmp_name);                                Hook::exec('actionWatermark', array('id_image' => $image->id, 'id_product' => $product->id));                                if (!$image->update())                                    $this->errors[] = Tools::displayError('Error while updating status');                                if (version_compare(_PS_VERSION_, '1.5.1', '>=')) {                                    $shops = Shop::getContextListShopID();                                    $image->associateTo($shops);                                }                            }                        }                    //                    if ($_FILES['virtual_product_file']['name']) {                        if ($id_download = ProductDownload::getIdFromIdProduct((int)$id_edit)) {                            $download = new ProductDownload($id_download);                            $download->delete();                        }                        $download = new ProductDownload();                        $download->id_product = $product->id;                        $download->display_filename = $_FILES['virtual_product_file']['name'];                        $file_name = ProductDownload::getNewFilename();                        $download->physically_filename = $file_name;                        $download->filename = $file_name;                        $download->date_deposit = date('Y-m-d H:i:s');                        $download->nb_days_accessible = '30';                        $download->active = 1;                        $file = $_FILES['virtual_product_file']['tmp_name'];                        if (!call_user_func_array('copy', array($file, _PS_DOWNLOAD_DIR_ . $download->physically_filename)))                            $this->errors[] = Tools::displayError('File is not loaded. Contact the administrator.');                        unlink($file);                        if (!count($this->errors))                            if (!$download->save())                                $this->errors[] = Tools::displayError('The file has not been added to the product. Contact the administrator.');                    }                    if (!$id_edit && count($this->errors)) $product->delete();                    else {                        if (empty($this->errors)) {                            $type = $id_edit ? 'edit' : 'new';                            $a_message = $id_edit ? array('mess' => 'updated') : array('mess' => 'added');                            prodAlert($customer, $product->id, $type);                            Tools::redirect(Context::getContext()->link->getModuleLink('addprod', 'user', $a_message));                        }                    }                }            }        } elseif (Tools::isSubmit('submitPayment')) {            $ballance = PaymentsCore::getBallance((int)$this->context->cookie->id_customer);            if (!($summ = Tools::GetValue('summ')))                $this->errors[] = Tools::displayError('Do not enter the amount!');            elseif ($summ > $ballance)                $this->errors[] = Tools::displayError('You can not withdraw more than is in the account!');            if (!count($this->errors)) {                $payment = new PaymentsCore();                $payment->id_seller = $addprod_manufacturer_id;                $payment->summ = -abs((float)$summ);                $payment->status = 1;                $payment->description = pSQL(Tools::GetValue('message'));                $a_template_vars = array('{customer_id}' => $customer->id,                    '{summ}' => formatMoney(abs((float)$summ)),                    '{description}' => cleanBreaks($payment->description));                $default_lang = new Language(Configuration::get('PS_LANG_DEFAULT'));                $s_title = getCustomTranslation('Withdrawal of rewards ordered!', $default_lang->id);                PaymentsCore::sendMail($s_title, 'payment_notice', $a_template_vars);                if (!$payment->add())                    $this->errors[] = Tools::displayError('Error in withdrawal query');                if (empty($this->errors))                    Tools::redirect(Context::getContext()->link->getModuleLink('addprod', 'user', array('mess' => 'withdrawalAccepted')));            }        } elseif ($id_delete = Tools::GetValue('delete')) {            $product = new Product((int)$id_delete);            if ($product->id_manufacturer != $addprod_manufacturer_id)                $this->errors[] = Tools::displayError('Do not touch someone elses product');            if (!count($this->errors)) {                if (Configuration::get('ADDPROD_DELETE')) {                    $product->active = 0;                    $product->update();                } else $product->delete();                prodAlert($customer, $product->id, 'del');                Tools::redirect(Context::getContext()->link->getModuleLink('addprod', 'user', array('mess' => 'removed')));            }        } elseif (Tools::GetValue('edit') && Tools::GetValue('delimg')) {            $id_product = Tools::GetValue('edit');            $id_image = Tools::GetValue('delimg');            $product = new Product($id_product);            $image = new Image($id_image);            if (Validate::isLoadedObject($image) && ($product->id == $image->id_product) && Validate::isLoadedObject($product)) {                $image->delete();                Db::getInstance()->executeS('SELECT `id_image`	FROM `' . _DB_PREFIX_ . 'image` WHERE `id_image` = "' . (int)$id_image . '"');                Tools::redirect(Context::getContext()->link->getModuleLink('addprod', 'user', array('mess' => 'imageRemoved', 'edit' => $id_product)));            } else                $this->errors[] = Tools::displayError('Do not touch someone elses product');        }    }    public function setMedia()    {        parent::setMedia();        $this->addJS(array(            $this->module->getPathUri() . '/jquery.MultiFile.js',            _PS_JS_DIR_ . 'jquery/plugins/jquery.idTabs.js'        ));        $this->context->controller->addJqueryPlugin('fancybox');        $this->addCSS($this->module->getPathUri() . '/views/css/addprod.css', 'all');        if (version_compare(_PS_VERSION_, '1.6', '>=')) $this->addCSS($this->module->getPathUri() . '/views/css/addprod16.css', 'all');    }    public function initContent()    {        parent::initContent();        $addprod_manufacturer_id = PaymentsCore::getManufacturer((int)$this->context->cookie->id_customer);        $rewards = 100 - PaymentsCore::getManufacturerPercent($addprod_manufacturer_id);        if ($addprod_manufacturer_id) $products = getProducts((int)$addprod_manufacturer_id, false);        else $products = Array();        $total_q = 0;        $total_summ = 0;        if (is_array($products))            foreach ($products as &$product1) {                $total_q += (int)$product1['sold_q'];                $total_summ += (float)$product1['sold_total'];                $product1['price'] = formatMoney($product1['price']);            }        $total_summ = formatMoney($total_summ);        $ballance = PaymentsCore::getBallance((int)$this->context->cookie->id_customer);        $currency_sign = getDefaultcurrency();        $lngs = $this->lngs_resorted;        $block_categ_tree = array();        if ($result = Db::getInstance(_PS_USE_SQL_SLAVE_)->ExecuteS('					SELECT DISTINCT c.*, cl.*					FROM `' . _DB_PREFIX_ . 'category` c					LEFT JOIN `' . _DB_PREFIX_ . 'category_lang` cl ON (c.`id_category` = cl.`id_category` AND `id_lang` = ' . (int)$this->context->language->id . ')					LEFT JOIN `' . _DB_PREFIX_ . 'category_group` cg ON (cg.`id_category` = c.`id_category`)					WHERE (c.`active` = 1 OR c.`id_category` = 1)					AND cg.`id_group` = ' . _PS_DEFAULT_CUSTOMER_GROUP_ . '					ORDER BY `level_depth` ASC, c.`position` ASC')        ) {            $result_parents = array();            $result_ids = array();            foreach ($result as &$row) {                $result_parents[$row['id_parent']][] = &$row;                $result_ids[$row['id_category']] = &$row;            }            $block_categ_tree = getTree($result_parents, $result_ids, 10, null, 0);        }        if (file_exists(_PS_THEME_DIR_ . 'modules/addprod/addprod_branch.tpl'))            $this->context->smarty->assign('addprod_branch', _PS_THEME_DIR_ . 'modules/addprod/addprod_branch.tpl');        else $this->context->smarty->assign('addprod_branch', _PS_MODULE_DIR_ . 'addprod/addprod_branch.tpl');        $payments = PaymentsCore::getPayments($addprod_manufacturer_id);        $count_payments = count($payments);        for ($i = 0; $i < $count_payments; $i++) {            $payments[$i]['summ'] = formatMoney($payments[$i]['summ']);            $payments[$i]['description'] = cleanBreaks($payments[$i]['description']);            if ($payments[$i]['status'] == 0) {                $order = new Order($payments[$i]['id_order']);                if (Validate::isLoadedObject($order)) {                    $address = new Address($order->id_address_delivery, $this->context->language->id);                    $carrier = new Carrier($order->id_carrier);                    $payments[$i]['address'] = AddressFormat::generateAddress($address);                    $payments[$i]['address'] .= '<br>' . $this->module->l('Carrier:', 'user') . ' ' . $carrier->name;                }            }        }        $count_products = count($products);        for ($i = 0; $i < $count_products; $i++) {            $products[$i]['price'] = formatMoney($products[$i]['price']);            $products[$i]['sold_total'] = formatMoney($products[$i]['sold_total']);        }        $eimages = array();        $eproduct = null;        $a_product_categories = array();        $a_product_categories_ids = array();        $filename = '';        $lngs = $this->lngs_resorted;        $a_categorie = (array)Tools::getValue('categories', array());        if (isset($a_categorie) && !empty($a_categorie))            foreach ($a_categorie as $id)                $a_product_categories[] = new Category((int)$id, (int)$this->context->language->id);        if ($id_edit = Tools::GetValue('edit')) {            $product = new Product((int)$id_edit, false, (int)$this->context->language->id);            $download = new ProductDownload(ProductDownload::getIdFromIdProduct($product->id));            $count_lngs = count($lngs);            for ($i = 0; $i < $count_lngs; $i++) {                $lngs[$i]['product'] = new Product((int)$id_edit, false, $lngs[$i]['id_lang']);                $lngs[$i]['posted_name'] = Tools::getIsset('name_' . $lngs[$i]['id_lang']) ? Tools::getValue('name_' . $lngs[$i]['id_lang']) : null;                $lngs[$i]['posted_s_descr'] = Tools::getIsset('description_short_' . $lngs[$i]['id_lang']) ?                    Tools::getValue('description_short_' . $lngs[$i]['id_lang']) : null;                $lngs[$i]['posted_description'] = Tools::getIsset('description_' . $lngs[$i]['id_lang']) ?                    Tools::getValue('description_' . $lngs[$i]['id_lang']) : null;            }            if ($product->id_manufacturer != $addprod_manufacturer_id)                $this->errors[] = Tools::displayError('Do not touch someone elses product');            $eimages = $product->getImages((int)$this->context->language->id);            $a_product_categories_ids = Product::getProductCategories($product->id);            foreach ($a_product_categories_ids as $id)                $a_product_categories[] = new Category((int)$id, (int)$this->context->language->id);            $eproduct = $product;            $filename = ($eproduct->is_virtual) ? $download->display_filename : '';        } else {            $count_lngs = count($lngs);            for ($i = 0; $i < $count_lngs; $i++) {                $lngs[$i]['posted_name'] = Tools::getValue('name_' . $lngs[$i]['id_lang'], '');                $lngs[$i]['posted_s_descr'] = Tools::getValue('description_short_' . $lngs[$i]['id_lang'], '');                $lngs[$i]['posted_description'] = Tools::getValue('description_' . $lngs[$i]['id_lang'], '');            }        }        $mess = '';        $add_information = '';        $active_tab = 'adprod';        switch (Tools::getValue('mess')) {            case 'updated':                $mess = 'This product is updated';                if (!Configuration::get('ADDPROD_UPDACTIVE'))                    $add_information = ' and sent for moderation.';                break;            case 'added':                $mess = 'Product added';                if (!Configuration::get('ADDPROD_ADDACTIVE'))                    $add_information = ' and sent for moderation.';                $active_tab = 'product';                break;            case 'removed':                $mess = 'Product has been removed!';                $active_tab = 'product';                break;            case 'imageRemoved':                $mess = 'Image was removed!';                break;            case 'withdrawalAccepted':                $mess = getCustomTranslation('Withdraw order was sent!', $this->context->language->id);                $active_tab = 'payment';                break;        }        if (Tools::isSubmit('submitPayment'))            $active_tab = 'payment';        $is_virtual_product = Configuration::get('ADDPROD_TYPE_PRODUCT');        if (count($this->errors) && !Tools::getValue('is_virtual_product')) $is_virtual_product = 0;        if ($id_edit) $is_virtual_product = $eproduct->is_virtual;        $a_tax_rules = array();        $ps_tax = Configuration::get('PS_TAX');        if ($ps_tax)            $a_tax_rules = TaxRulesGroup::getTaxRulesGroups();        $addprod_manufacturer_id = (int)PaymentsCore::getManufacturer((int)$this->context->cookie->id_customer);        $cms = new CMS(Configuration::get('CMS_POPUP_WINDOW'), $this->context->language->id);        if (!Validate::isLoadedObject($cms))            $cms = false;        if (Validate::isLoadedObject($eproduct))            $eproduct->quantity = Product::getQuantity($eproduct->id);        $carriers = array();        $post_carriers = Tools::getValue('carriers');        if (Validate::isLoadedObject($eproduct)) {            if (!$post_carriers || !is_array($post_carriers)) {                $tmp_carriers = $eproduct->getCarriers();                foreach ($tmp_carriers as $tmp_carrier)                    $carriers[] = $tmp_carrier['id_reference'];            } else                $carriers = $post_carriers;        } else {            if ($post_carriers && is_array($post_carriers))                $carriers = $post_carriers;        }        $carriers_list = Carrier::getCarriers($this->context->language->id, false, false, false, null, Carrier::ALL_CARRIERS);        $manufacturer = new Manufacturer($addprod_manufacturer_id);        $this->context->smarty->assign(array(            'is16' => version_compare(_PS_VERSION_, '1.6', '>='),            'upd_mod' => Configuration::get('ADDPROD_UPDACTIVE'),            'add_mod' => Configuration::get('ADDPROD_ADDACTIVE'),            'vrt_mod' => Configuration::get('ADDPROD_VIRTUAL'),            'products' => $products,            'total_q' => $total_q,            'total_summ' => formatMoney($total_summ),            'categories' => $block_categ_tree,            'ballance' => formatMoney(!$ballance ? 0 : $ballance),            'currency_sign' => $currency_sign,            'payments' => $payments,            'activeTab' => $active_tab,            'eimages' => $eimages,            'eproduct' => $eproduct,            'filename' => $filename,            'post' => $_POST,            'lngs' => $lngs,            'mess' => $mess,            'PS_TAX' => $ps_tax,            'aTaxRules' => $a_tax_rules,            'addInformation' => $add_information,            'isVirtualProduct' => $is_virtual_product,            'aProductCategoriesIds' => $a_product_categories_ids,            'aProductCategories' => $a_product_categories,            'rewards' => $rewards,            'ifGth1605' => version_compare(_PS_VERSION_, '1.6.0.5', '>'),            'addprod_manufacturer_id' => $addprod_manufacturer_id,            'cms' => $cms,            'carriers' => $carriers,            'carriers_list' => $carriers_list,            'PS_STOCK_MANAGEMENT' => Configuration::get('PS_STOCK_MANAGEMENT'),            'manufacturer' => $manufacturer,            'addprod_img_dir' => _MODULE_DIR_ . 'addprod/views/img/'        ));        if (_PS_VERSION_ < 1.6)            $this->context->smarty->assign(array(                'HOOK_LEFT_COLUMN' => ''            ));        $this->setTemplate('addprod-user.tpl');    }}