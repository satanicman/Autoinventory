<?php/** * 2007-2015 PrestaShop * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/afl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to http://www.prestashop.com for more information. * * @author    PrestaShop SA    <contact@prestashop.com> * @copyright 2007-2015 PrestaShop SA * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0) * International Registered Trademark & Property of PrestaShop SA */$cookie = $GLOBALS['cookie'];$smarty = $GLOBALS['smarty'];$use_ssl = true;require_once(dirname(__FILE__).'/../../config/config.inc.php');require_once(dirname(__FILE__).'/../../images.inc.php');require_once(dirname(__FILE__).'/../../init.php');require_once(dirname(__FILE__).'/PaymentsCore.php');if (!$cookie->isLogged())	Tools::redirect('authentication.php?back=modules/addprod/addprod-user.php');require_once(dirname(__FILE__).'/addprod.php');$customer = new Customer((int)$cookie->id_customer);if (!PaymentsCore::groupEnabled($customer->id) || !checkActivationStateAddProd(Configuration::get('ADDACTIVATION_CODE')))	Tools::redirect('my-account.php');if (Tools::isSubmit('submitAgree')){	$manufacturer = new Manufacturer();	$manufacturer->name = ($customer->firstname.' '.$customer->lastname);	$manufacturer->add();	PaymentsCore::createManufacturer($cookie->id_customer, $manufacturer->id);}$module = Module::getInstanceByName('addprod');$addprod_manufacturer_id = PaymentsCore::getManufacturer($cookie->id_customer);if (Tools::isSubmit('ajax') && Tools::isSubmit('saveManufacturerInfo')){	$name = Tools::getValue('name');	$description = Tools::getValue('description');	$file = array();	if (isset($_FILES['logo']))		$file = $_FILES['logo'];	$manufacturer = new Manufacturer($addprod_manufacturer_id);	$errors = array();	if (empty($name))		$errors[] = $module->l('Name empty', 'addprod-user');	if (!empty($name) && !Validate::isCatalogName($name))		$errors[] = $module->l('Name wrong', 'addprod-user');	if (isset($file['tmp_name']))	{		if (in_array(exif_imagetype($file['tmp_name']), array(IMAGETYPE_JPEG, IMAGETYPE_GIF, IMAGETYPE_PNG)))		{			if (file_exists(_PS_MANU_IMG_DIR_.$manufacturer->id.'.jpg'))				unlink(_PS_MANU_IMG_DIR_.$manufacturer->id.'.jpg');			imageResize($file['tmp_name'], _PS_MANU_IMG_DIR_.$manufacturer->id.'.jpg');			$images_types = ImageType::getImagesTypes('manufacturers');			foreach ($images_types as $k => $image_type)			{				if (file_exists(_PS_MANU_IMG_DIR_.$manufacturer->id.'-'.Tools::stripslashes($image_type['name']).'.jpg'))					unlink(_PS_MANU_IMG_DIR_.$manufacturer->id.'-'.Tools::stripslashes($image_type['name']).'.jpg');				imageResize(					_PS_MANU_IMG_DIR_.$manufacturer->id.'.jpg',					_PS_MANU_IMG_DIR_.$manufacturer->id.'-'.Tools::stripslashes($image_type['name']).'.jpg',					(int)$image_type['width'],					(int)$image_type['height']				);			}		}		else			$errors[] = $module->l('File wrong', 'addprod-user');	}	if (!count($errors))	{		$manufacturer->name = $name;		$manufacturer->description = $description;		$manufacturer->save();		die(Tools::jsonEncode(array(			'hasError' => false,			'message' => $module->l('Saved successfully!', 'addprod-user')		)));	}	else		die(Tools::jsonEncode(array(			'hasError' => true,			'errors' => $errors		)));}Tools::addJS(array(	$module->getPathUri().'/jquery.MultiFile.js',	_PS_JS_DIR_.'jquery/jquery.idTabs.modified.js',	_PS_JS_DIR_.'jquery/jquery.fancybox-1.3.4.js'));Tools::addCSS($module->getPathUri().'/views/css/addprod.css',	'all');Tools::addCSS(_PS_CSS_DIR_.'jquery.fancybox-1.3.4.css',	'all');$smarty->assign(array(	'meta_title' => $module->l('My products', 'user').' - '.Configuration::get('PS_SHOP_NAME')));include(dirname(__FILE__).'/../../header.php');$s_new_message_about_w = '';$active_tab = 'adprod';$errors = array();$ballance = PaymentsCore::getBallance((int)$cookie->id_customer);$currency_sign = getDefaultcurrency();$lngs = Language::getLanguages();$default_lang = Configuration::get('PS_LANG_DEFAULT');$lngs_resorted = Array();for ($ii = 0; $ii < 2; $ii++){	$count_lngs = count($lngs);	for ($i = 0; $i < $count_lngs; $i++)	{		if ($ii == 0) $check = ($lngs[$i]['id_lang'] == $default_lang);			else  $check = ($lngs[$i]['id_lang'] != $default_lang);		if ($check) $lngs_resorted[] = $lngs[$i];	}}$lngs = $lngs_resorted;$a_product_categories = array();$a_product_categories_ids = array();$a_categorie = (array)Tools::getValue('categories', array());if (isset($a_categorie) && !empty($a_categorie))	foreach ($a_categorie as $id)		$a_product_categories[] = new Category((int)$id, $cookie->id_lang);if (Tools::isSubmit('submitProduct')){	if ($addprod_manufacturer_id) $manufacturer = new Manufacturer($addprod_manufacturer_id);		else		{			$manufacturer = new Manufacturer();			$manufacturer->name = ($customer->firstname.' '.$customer->lastname);			$manufacturer->add();			PaymentsCore::createManufacturer($cookie->id_customer, $manufacturer->id);		}	if ($id_edit = Tools::GetValue('product_id'))	{		$product = new Product((int)$id_edit);		if ($product->id_manufacturer != $addprod_manufacturer_id)			$errors[] = Tools::displayError('Do not touch someone elses product');	}	else		$product = new Product();	$name = Array();	$description_short = Array();	$description = Array();	if (!Validate::isCatalogName($name[$default_lang] = Tools::getValue('name_'.$default_lang))			|| empty($name[$default_lang]))		$errors[] = Tools::displayError('Do not enter a title for the primary language');	if (!Validate::isCleanHtml($description_short[$default_lang] = Tools::getValue('description_short_'.$default_lang))			|| Tools::strlen($description_short[$default_lang]) < 10)		$errors[] = Tools::displayError('Do not enter a short description for the primary language or it is too short');	if (!Validate::isCleanHtml($description[$default_lang] = Tools::getValue('description_'.$default_lang))			|| Tools::strlen($description[$default_lang]) < 10)		$errors[] = Tools::displayError('No description for the main language, or it is too short');	$count_lngs = count($lngs);	for ($i = 1; $i < $count_lngs; $i++)	{		$name[$lngs[$i]['id_lang']] = Tools::getValue('name_'.$lngs[$i]['id_lang']);		if (Validate::isCleanHtml($description_short[$lngs[$i]['id_lang']] = Tools::getValue('description_short_'.$lngs[$i]['id_lang']))				&& Tools::strlen($description_short[$lngs[$i]['id_lang']]) < 10				&& Tools::strlen($description_short[$lngs[$i]['id_lang']]) > 0)			$errors[] = Tools::displayError('Short description for localization "'.$lngs[$i]['iso_code'].'" too short');		if (Validate::isCleanHtml($description[$lngs[$i]['id_lang']] = Tools::getValue('description_'.$lngs[$i]['id_lang']))				&& Tools::strlen($description[$lngs[$i]['id_lang']]) < 10				&& Tools::strlen($description[$lngs[$i]['id_lang']]) > 0)			$errors[] = Tools::displayError('Description for localization "'.$lngs[$i]['iso_code'].'" too short');	}		$i_default_category = (int)Tools::getValue('defaultCategory', 0);		if (!$i_default_category) $errors[] = Tools::displayError('Default category is not set.');		if ($_FILES['image_product']['name'])		{			$i = 0;			foreach ($_FILES['image_product']['tmp_name'] as $image_product)			{				if (file_exists($image_product))				{					$a_img = array('name' => $_FILES['image_product']['name'][$i], 'tmp_name' => $image_product, 'type' => $_FILES['image_product']['type'][$i]);					if (!isPicture($a_img))					{						$errors[] = Tools::displayError('File type of image is not allowed.');						break;					}				}				$i++;			}		}		$download = null;		$filename = '';		if ($id_edit)		{			$download = new ProductDownload(ProductDownload::getIdFromIdProduct($id_edit));			$filename = $download->display_filename;		}		if (!$_FILES['virtual_product_file']['name'] && (int)Tools::getValue('is_virtual_product') && $filename == '')			$errors[] = Tools::displayError('Not uploaded file.');	if (!count($errors))	{		$product->link_rewrite[$default_lang] = (Tools::link_rewrite($name[$default_lang]) || Tools::link_rewrite($description_short[$default_lang]));		$product->name[$default_lang] = $name[$default_lang];		$product->description_short[$default_lang] = $description_short[$default_lang];		$product->description[$default_lang] = $description[$default_lang];		foreach ($lngs as $lng)		{			if ($lng['id_lang'] != $default_lang)			{				$product->link_rewrite[$lng['id_lang']] = Tools::link_rewrite($name[$lng['id_lang']] ? $name[$lng['id_lang']] : $name[$default_lang]);				$product->name[$lng['id_lang']] = $name[$lng['id_lang']] ? $name[$lng['id_lang']] : $name[$default_lang];				$product->description_short[$lng['id_lang']] = $description_short[$lng['id_lang']] ?					$description_short[$lng['id_lang']] : $description_short[$default_lang];				$product->description[$lng['id_lang']] = $description[$lng['id_lang']] ? $description[$lng['id_lang']] : $description[$default_lang];			}		}		$product->id_category_default = (int)Tools::getValue('defaultCategory', 0);		$product->price = (float)Tools::getValue('price');		$product->quantity = (!Tools::getValue('is_virtual_product') ? Tools::getValue('quantity')  : 1000);		$product->id_tax = 0;		$product->id_manufacturer = $manufacturer->id;		$id_tax = 1;		if (Configuration::get('PS_TAX')) $id_tax = (int)Tools::getValue('tax_rule');		$product->id_tax_rules_group = $id_tax;		if ($id_edit)		{			$product->active = Configuration::get('ADDPROD_UPDACTIVE');			$result = $product->update();		}		else		{			$product->active = Configuration::get('ADDPROD_ADDACTIVE');			$result = $product->add();		}		if (!$result)			$errors[] = Tools::displayError('This product is not added. Contact the administrator.');		else		{			if ($id_edit)				$smarty->assign('r_updated', 1);			else				$smarty->assign('r_added', 1);						$a_categories = (array)Tools::getValue('categories', array());						$a_categories = array_map('intval', $a_categories);			$product->updateCategories($a_categories, false);			if ($_FILES['image_product']['name'])							foreach ($_FILES['image_product']['tmp_name'] as $image_product)							{								if (file_exists($image_product))								{									$image = new Image();									$image->id_product = (int)$product->id;									$image->position = Image::getHighestPosition($product->id) + 1;									$image->cover = !count($product->getImages(Configuration::get('PS_LANG_DEFAULT')));									$image->add();									copyImage($product->id, $image->id, $image_product);								}							}						if (!(int)Tools::getValue('is_virtual_product'))						{							if ($id_download = ProductDownload::getIdFromIdProduct((int)$id_edit))							{								$download = new ProductDownload($id_download);								$download->delete();							}						}			if ($_FILES['virtual_product_file']['name'] && (int)Tools::getValue('is_virtual_product'))			{				if ($id_download = ProductDownload::getIdFromIdProduct((int)$id_edit))				{					$download = new ProductDownload($id_download);					$download->delete();				}				$download = new ProductDownload();				$download->id_product = $product->id;				$download->display_filename = $_FILES['virtual_product_file']['name'];				$download->physically_filename = ProductDownload::getNewFilename();				$download->date_deposit = date('Y-m-d H:i:s');				$download->nb_days_accessible = '30';				$download->active = 1;				$file = $_FILES['virtual_product_file']['tmp_name'];				if (!call_user_func_array('copy', array($file, _PS_DOWNLOAD_DIR_.$download->physically_filename)))					$errors[] = Tools::displayError('File is not loaded. Contact the administrator.');				unlink($file);				if (!count($errors))					if (!$download->save())					$errors[] = Tools::displayError('The file has not been added to the product. Contact the administrator.');			}			if (!$id_edit && count($errors)) $product->delete();				else				{					$type = $id_edit ? 'edit' : 'new';					prodAlert($customer, $product->id, $type);								$_POST = array();				}		}	} elseif (!$id_edit)	{		$count_lngs = count($lngs);		for ($i = 0; $i < $count_lngs; $i++)		{			$lngs[$i]['posted_name'] = Tools::getValue('name_'.$lngs[$i]['id_lang']);			$lngs[$i]['posted_s_descr'] = Tools::getValue('description_short_'.$lngs[$i]['id_lang']);			$lngs[$i]['posted_description'] = Tools::getValue('description_'.$lngs[$i]['id_lang']);		}	} elseif ($id_edit = Tools::GetValue('product_id')) edit_product($id_edit);} elseif (Tools::isSubmit('submitPayment')){	$active_tab = 'payment';	if (!($summ = Tools::GetValue('summ')))		$errors[] = Tools::displayError('Do not enter the amount!');	elseif ($summ > $ballance)	$errors[] = Tools::displayError('You can not withdraw more than is in the account!');	if (!count($errors))	{		$payment = new PaymentsCore();		$payment->id_seller = $addprod_manufacturer_id;		$payment->summ = - abs((float)$summ);		$payment->status = 1;		$payment->description = pSQL(Tools::GetValue('message'));				$a_template_vars = array('{customer_id}' => $customer->id,										'{summ}' => formatMoney(abs((float)$summ)),										'{description}' => cleanBreaks($payment->description));				$default_lang = new Language(Configuration::get('PS_LANG_DEFAULT'));				$s_title = getCustomTranslation('Withdrawal of rewards ordered!', $default_lang->id);				PaymentsCore::sendMail($s_title, 'payment_notice', $a_template_vars);		if (!$payment->add())			$errors[] = Tools::displayError('Error in withdrawal query');				else $s_new_message_about_w = 'Withdraw order was sent!';	}} elseif ($id_edit = Tools::GetValue('edit')) edit_product($id_edit);	elseif ($id_delete = Tools::GetValue('delete'))	{		$active_tab = 'product';		$product = new Product((int)$id_delete);		if ($product->id_manufacturer != $addprod_manufacturer_id)			$errors[] = Tools::displayError('Do not touch someone elses product');		if (!count($errors))		{			if (Configuration::get('ADDPROD_DELETE'))			{				$product->active = 0;				$product->update();			}			else  $product->delete();			$smarty->assign('r_deleted', true);			prodAlert($customer, $product->id, 'del');		}	}if ($addprod_manufacturer_id)$products = getProducts((int)$addprod_manufacturer_id, false);	else $products = Array();$total_q = 0;$total_summ = 0;if (is_array($products))	foreach ($products as $product)	{	$total_q += (int)$product['sold_q'];	$total_summ += (float)$product['sold_total'];	}if ($result = Db::getInstance(_PS_USE_SQL_SLAVE_)->ExecuteS('		SELECT DISTINCT c.*, cl.*		FROM `'._DB_PREFIX_.'category` c		LEFT JOIN `'._DB_PREFIX_.'category_lang` cl ON (c.`id_category` = cl.`id_category` AND `id_lang` = '.(int)$cookie->id_lang.')		LEFT JOIN `'._DB_PREFIX_.'category_group` cg ON (cg.`id_category` = c.`id_category`)		WHERE (c.`active` = 1 OR c.`id_category` = 1)		AND cg.`id_group` = '._PS_DEFAULT_CUSTOMER_GROUP_.'		ORDER BY `level_depth` ASC, c.`position` ASC')){	$result_parents = array();	$result_ids = array();	foreach ($result as &$row)	{		$result_parents[$row['id_parent']][] = &$row;		$result_ids[$row['id_category']] = &$row;	}	$block_categ_tree = getTree($result_parents, $result_ids, 10, 1, 0);}if (file_exists(_PS_THEME_DIR_.'modules/addprod/addprod_branch.tpl'))	$smarty->assign('addprod_branch', _PS_THEME_DIR_.'modules/addprod/addprod_branch.tpl');	else $smarty->assign('addprod_branch', _PS_MODULE_DIR_.'addprod/addprod_branch.tpl');$payments = PaymentsCore::getPayments($addprod_manufacturer_id);$count_payments = count($payments);for ($i = 0; $i < $count_payments; $i++){	$payments[$i]['summ'] = formatMoney($payments[$i]['summ']);	$payments[$i]['description'] = cleanBreaks($payments[$i]['description']);	if ($payments[$i]['status'] == 0)	{		$order = new Order($payments[$i]['id_order']);		if (Validate::isLoadedObject($order))		{			$address = new Address($order->id_address_delivery, $cookie->id_lang);			$carrier = new Carrier($order->id_carrier);		}	}}$count_products = count($products);for ($i = 0; $i < $count_products; $i++){	$products[$i]['price'] = formatMoney($products[$i]['price']);	$products[$i]['sold_total'] = formatMoney($products[$i]['sold_total']);}$is_virtual_product = Configuration::get('ADDPROD_TYPE_PRODUCT');if (count($errors) && !(int)Tools::getValue('is_virtual_product')) $is_virtual_product = 0;$post = $_POST;$a_tax_rules = array();$ps_tax = Configuration::get('PS_TAX');if ($ps_tax)	$a_tax_rules = TaxRulesGroup::getTaxRulesGroups();$rewards = 100 - PaymentsCore::getManufacturerPercent($addprod_manufacturer_id);$addprod_manufacturer_id = (int)PaymentsCore::getManufacturer((int)$cookie->id_customer);$cms = new CMS(Configuration::get('CMS_POPUP_WINDOW'), $cookie->id_lang);if (!Validate::isLoadedObject($cms))	$cms = false;$smarty->assign(array(		'upd_mod'=>Configuration::get('ADDPROD_UPDACTIVE'),		'add_mod'=>Configuration::get('ADDPROD_ADDACTIVE'),		'vrt_mod'=>Configuration::get('ADDPROD_VIRTUAL'),		'categories' => $block_categ_tree,		'products' => $products,		'ballance' => formatMoney($ballance),		'payments' => $payments,		'total_q' => $total_q,		'total_summ' => formatMoney($total_summ),		'activeTab' => $active_tab,		'errors' => $errors,		'currency_sign' => $currency_sign,		'lngs' => $lngs,				'post' => $post,				'PS_TAX' => $ps_tax,				'aTaxRules' => $a_tax_rules,				'rewards' => $rewards,				'sNewMessageAboutW' => getCustomTranslation($s_new_message_about_w, $cookie->id_lang),	'addprod_manufacturer_id' => $addprod_manufacturer_id,	'cms' => $cms,	'PS_STOCK_MANAGEMENT' => Configuration::get('PS_STOCK_MANAGEMENT'),	'addprod_img_dir' => _MODULE_DIR_.'addprod/views/img/',	'manufacturer' => new Manufacturer($addprod_manufacturer_id)));if (!(int)Tools::getValue('edit')){	$smarty->assign(array(					'isVirtualProduct' => $is_virtual_product,					'aProductCategoriesIds' => $a_product_categories_ids,					'aProductCategories' => $a_product_categories,	));}echo Module::display(dirname(__FILE__).'/addprod.php', 'addprod-user.tpl');include(dirname(__FILE__).'/../../footer.php');